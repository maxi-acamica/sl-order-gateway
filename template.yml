service:
  service: sl-order-gateway
  serviceObject:
    name: sl-order-gateway
  provider:
    stage: dev
    variableSyntax: '\${([^{}]+?)}'
    name: aws
    runtime: nodejs12.x
    region: us-east-1
    environment:
      SERVICE_NAME: sl-order-gateway
      sqs_event: sl-order-gateway-order-dev
      STAGE: dev
      REGION: us-east-1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'sqs:*'
        Resource: '*'
    versionFunctions: true
    remoteFunctionData: null
    compiledCloudFormationTemplate:
      AWSTemplateFormatVersion: '2010-09-09'
      Description: The AWS CloudFormation template for this Serverless application
      Resources:
        ServerlessDeploymentBucket:
          Type: 'AWS::S3::Bucket'
          Properties:
            BucketEncryption:
              ServerSideEncryptionConfiguration:
                - ServerSideEncryptionByDefault:
                    SSEAlgorithm: AES256
        ServerlessDeploymentBucketPolicy:
          Type: 'AWS::S3::BucketPolicy'
          Properties:
            Bucket:
              Ref: ServerlessDeploymentBucket
            PolicyDocument:
              Statement:
                - Action: 's3:*'
                  Effect: Deny
                  Principal: '*'
                  Resource:
                    - 'Fn::Join':
                        - ''
                        - - 'arn:'
                          - Ref: 'AWS::Partition'
                          - ':s3:::'
                          - Ref: ServerlessDeploymentBucket
                          - /*
                  Condition:
                    Bool:
                      'aws:SecureTransport': false
        QueueUnderscoreorderLogGroup:
          Type: 'AWS::Logs::LogGroup'
          Properties:
            LogGroupName: /aws/lambda/sl-order-gateway-dev-queue_order
        IamRoleLambdaExecution:
          Type: 'AWS::IAM::Role'
          Properties:
            AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Principal:
                    Service:
                      - lambda.amazonaws.com
                  Action:
                    - 'sts:AssumeRole'
            Policies:
              - PolicyName:
                  'Fn::Join':
                    - '-'
                    - - sl-order-gateway
                      - dev
                      - lambda
                PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                    - Effect: Allow
                      Action:
                        - 'logs:CreateLogStream'
                        - 'logs:CreateLogGroup'
                      Resource:
                        - 'Fn::Sub': >-
                            arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sl-order-gateway-dev*:*
                    - Effect: Allow
                      Action:
                        - 'logs:PutLogEvents'
                      Resource:
                        - 'Fn::Sub': >-
                            arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sl-order-gateway-dev*:*:*
                    - $ref: '$["service"]["provider"]["iamRoleStatements"][0]'
            Path: /
            RoleName:
              'Fn::Join':
                - '-'
                - - sl-order-gateway
                  - dev
                  - Ref: 'AWS::Region'
                  - lambdaRole
        QueueUnderscoreorderLambdaFunction:
          Type: 'AWS::Lambda::Function'
          Properties:
            Code:
              S3Bucket:
                Ref: ServerlessDeploymentBucket
              S3Key: >-
                serverless/sl-order-gateway/dev/1598551787951-2020-08-27T18:09:47.951Z/queue_order.zip
            FunctionName: sl-order-gateway-dev-queue_order
            Handler: src/order/index.input
            MemorySize: 1024
            Role:
              'Fn::GetAtt':
                - IamRoleLambdaExecution
                - Arn
            Runtime: nodejs12.x
            Timeout: 6
            Environment:
              Variables:
                SERVICE_NAME: sl-order-gateway
                sqs_event: sl-order-gateway-order-dev
                STAGE: dev
                REGION: us-east-1
            Layers:
              - Ref: TestLambdaLayer
          DependsOn:
            - QueueUnderscoreorderLogGroup
        QueueUnderscoreorderLambdaVersionYiKUy5Wb5NVGu5mGA4m9QmxiujcqZZhurdBtl8mc:
          Type: 'AWS::Lambda::Version'
          DeletionPolicy: Retain
          Properties:
            FunctionName:
              Ref: QueueUnderscoreorderLambdaFunction
            CodeSha256: IiY6du/PKxzwjZYtESzVT4tzacYwPlnFvPeaXk+PMT8=
        ApiGatewayRestApi:
          Type: 'AWS::ApiGateway::RestApi'
          Properties:
            Name: dev-sl-order-gateway
            EndpointConfiguration:
              Types:
                - EDGE
            Policy: ''
        ApiGatewayResourceQueueorder:
          Type: 'AWS::ApiGateway::Resource'
          Properties:
            ParentId:
              'Fn::GetAtt':
                - ApiGatewayRestApi
                - RootResourceId
            PathPart: queue_order
            RestApiId:
              Ref: ApiGatewayRestApi
        ApiGatewayMethodQueueorderOptions:
          Type: 'AWS::ApiGateway::Method'
          Properties:
            AuthorizationType: NONE
            HttpMethod: OPTIONS
            MethodResponses:
              - StatusCode: '200'
                ResponseParameters:
                  method.response.header.Access-Control-Allow-Origin: true
                  method.response.header.Access-Control-Allow-Headers: true
                  method.response.header.Access-Control-Allow-Methods: true
                ResponseModels: {}
            RequestParameters: {}
            Integration:
              Type: MOCK
              RequestTemplates:
                application/json: '{statusCode:200}'
              ContentHandling: CONVERT_TO_TEXT
              IntegrationResponses:
                - StatusCode: '200'
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: '''*'''
                    method.response.header.Access-Control-Allow-Headers: >-
                      'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
                    method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
                  ResponseTemplates:
                    application/json: >-
                      #set($origin = $input.params("Origin"))

                      #if($origin == "") #set($origin = $input.params("origin"))
                      #end

                      #if($origin.matches(".+"))
                      #set($context.responseOverride.header.Access-Control-Allow-Origin
                      = $origin) #end
            ResourceId:
              Ref: ApiGatewayResourceQueueorder
            RestApiId:
              Ref: ApiGatewayRestApi
        ApiGatewayMethodQueueorderPost:
          Type: 'AWS::ApiGateway::Method'
          Properties:
            HttpMethod: POST
            RequestParameters: {}
            ResourceId:
              Ref: ApiGatewayResourceQueueorder
            RestApiId:
              Ref: ApiGatewayRestApi
            ApiKeyRequired: false
            AuthorizationType: NONE
            Integration:
              IntegrationHttpMethod: POST
              Type: AWS_PROXY
              Uri:
                'Fn::Join':
                  - ''
                  - - 'arn:'
                    - Ref: 'AWS::Partition'
                    - ':apigateway:'
                    - Ref: 'AWS::Region'
                    - ':lambda:path/2015-03-31/functions/'
                    - 'Fn::GetAtt':
                        - QueueUnderscoreorderLambdaFunction
                        - Arn
                    - /invocations
            MethodResponses: []
        ApiGatewayDeployment1598551777768:
          Type: 'AWS::ApiGateway::Deployment'
          Properties:
            RestApiId:
              Ref: ApiGatewayRestApi
            StageName: dev
          DependsOn:
            - ApiGatewayMethodQueueorderOptions
            - ApiGatewayMethodQueueorderPost
        QueueUnderscoreorderLambdaPermissionApiGateway:
          Type: 'AWS::Lambda::Permission'
          Properties:
            FunctionName:
              'Fn::GetAtt':
                - QueueUnderscoreorderLambdaFunction
                - Arn
            Action: 'lambda:InvokeFunction'
            Principal: apigateway.amazonaws.com
            SourceArn:
              'Fn::Join':
                - ''
                - - 'arn:'
                  - Ref: 'AWS::Partition'
                  - ':execute-api:'
                  - Ref: 'AWS::Region'
                  - ':'
                  - Ref: 'AWS::AccountId'
                  - ':'
                  - Ref: ApiGatewayRestApi
                  - /*/*
        OrderQueue:
          Type: 'AWS::SQS::Queue'
          Properties:
            DelaySeconds: 5
            MessageRetentionPeriod: 345600
            QueueName: sl-order-gateway-order-dev
            ReceiveMessageWaitTimeSeconds: 5
            VisibilityTimeout: 10
            RedrivePolicy:
              deadLetterTargetArn:
                'Fn::GetAtt':
                  - OrderDeadLetterQueue
                  - Arn
              maxReceiveCount: 30
        OrderDeadLetterQueue:
          Type: 'AWS::SQS::Queue'
          Properties:
            QueueName: sl-order-gateway-order-dev-dlq
            MessageRetentionPeriod: 345600
        DeliveryStreamRole:
          Type: 'AWS::IAM::Role'
          DeletionPolicy: Delete
          Properties:
            RoleName: sl-order-gateway-dev-role
            ManagedPolicyArns:
              - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
              - 'arn:aws:iam::aws:policy/AmazonESFullAccess'
              - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
      Outputs:
        ServerlessDeploymentBucketName:
          Value:
            Ref: ServerlessDeploymentBucket
        QueueUnderscoreorderLambdaFunctionQualifiedArn:
          Description: Current Lambda function version
          Value:
            Ref: >-
              QueueUnderscoreorderLambdaVersionYiKUy5Wb5NVGu5mGA4m9QmxiujcqZZhurdBtl8mc
        ServiceEndpoint:
          Description: URL of the service endpoint
          Value:
            'Fn::Join':
              - ''
              - - 'https://'
                - Ref: ApiGatewayRestApi
                - .execute-api.
                - Ref: 'AWS::Region'
                - .
                - Ref: 'AWS::URLSuffix'
                - /dev
    coreCloudFormationTemplate:
      AWSTemplateFormatVersion: '2010-09-09'
      Description: The AWS CloudFormation template for this Serverless application
      Resources:
        ServerlessDeploymentBucket:
          Type: 'AWS::S3::Bucket'
          Properties:
            BucketEncryption:
              ServerSideEncryptionConfiguration:
                - ServerSideEncryptionByDefault:
                    SSEAlgorithm: AES256
        ServerlessDeploymentBucketPolicy:
          Type: 'AWS::S3::BucketPolicy'
          Properties:
            Bucket:
              Ref: ServerlessDeploymentBucket
            PolicyDocument:
              Statement:
                - Action: 's3:*'
                  Effect: Deny
                  Principal: '*'
                  Resource:
                    - 'Fn::Join':
                        - ''
                        - - 'arn:'
                          - Ref: 'AWS::Partition'
                          - ':s3:::'
                          - Ref: ServerlessDeploymentBucket
                          - /*
                  Condition:
                    Bool:
                      'aws:SecureTransport': false
      Outputs:
        ServerlessDeploymentBucketName:
          Value:
            Ref: ServerlessDeploymentBucket
    vpc: {}
  custom:
    globals:
      role: sl-order-gateway-dev-role
      sqs:
        order: sl-order-gateway-order-dev
    webpack:
      webpackConfig: webpack.config.js
      includeModules: false
      packager: npm
  plugins:
    - serverless-webpack
    - serverless-offline
    - serverless-dotenv-plugin
  pluginsData: {}
  functions:
    queue_order:
      handler: src/order/index.input
      events:
        - http:
            path: queue_order
            method: post
            cors:
              origins:
                - '*'
              origin: '*'
              methods:
                - OPTIONS
                - POST
              headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
              allowCredentials: false
            integration: AWS_PROXY
      layers:
        $ref: >-
          $["service"]["provider"]["compiledCloudFormationTemplate"]["Resources"]["QueueUnderscoreorderLambdaFunction"]["Properties"]["Layers"]
      name: sl-order-gateway-dev-queue_order
      package:
        artifact: .serverless/queue_order.zip
      memory: 1024
      timeout: 6
      runtime: nodejs12.x
      vpc: {}
      versionLogicalId: >-
        QueueUnderscoreorderLambdaVersionYiKUy5Wb5NVGu5mGA4m9QmxiujcqZZhurdBtl8mc
  resources:
    Resources:
      OrderQueue:
        Type: 'AWS::SQS::Queue'
        Properties:
          DelaySeconds: 5
          MessageRetentionPeriod: 345600
          QueueName: sl-order-gateway-order-dev
          ReceiveMessageWaitTimeSeconds: 5
          VisibilityTimeout: 10
          RedrivePolicy:
            deadLetterTargetArn:
              'Fn::GetAtt':
                - OrderDeadLetterQueue
                - Arn
            maxReceiveCount: 30
      OrderDeadLetterQueue:
        Type: 'AWS::SQS::Queue'
        Properties:
          QueueName: sl-order-gateway-order-dev-dlq
          MessageRetentionPeriod: 345600
      DeliveryStreamRole:
        Type: 'AWS::IAM::Role'
        DeletionPolicy: Delete
        Properties:
          RoleName: sl-order-gateway-dev-role
          ManagedPolicyArns:
            - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
            - 'arn:aws:iam::aws:policy/AmazonESFullAccess'
            - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
    Outputs: {}
  serviceFilename: serverless.yml
  layers: {}
  isDashboardMonitoringPreconfigured: false
package:
  individually: true
  artifactDirectoryName: 'serverless/sl-order-gateway/dev/1598551787951-2020-08-27T18:09:47.951Z'
  artifact: ''